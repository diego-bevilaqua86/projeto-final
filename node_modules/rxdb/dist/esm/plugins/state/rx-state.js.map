{"version":3,"file":"rx-state.js","names":["Subject","distinctUntilChanged","map","merge","shareReplay","startWith","tap","overwritable","getChangedDocumentsSince","RXJS_SHARE_REPLAY_DEFAULTS","getProperty","setProperty","PROMISE_RESOLVE_VOID","appendToArray","clone","randomCouchString","deepEqual","getFromMapOrCreate","RX_STATE_COLLECTION_SCHEMA","isValidWeakMapKey","nextRxStateId","newRxError","runPluginHooks","debugId","deepFrozenCache","WeakMap","RxStateBase","prefix","collection","_id","_state","_nonPersisted","_writeQueue","_initDone","_instanceId","properties","sId","maxLength","_ownEmits$","onDestroy","push","_lastIdQuery","findOne","sort","id","$","subscribe","pipe","event","operation","documentData","mergeOperationsIntoState","ops","_proto","prototype","set","path","modifier","_triggerWrite","then","length","useWrites","done","lastIdDoc","exec","nextId","undefined","newState","index","writeRow","value","newValue","k","v","insert","next","err","code","catch","error","name","get","ret","isDevMode","frozen","deepFreezeWhenDevMode","get$","get$$","obs","reactivity","database","getReactivityFactory","fromObservable","_cleanup","firstWrite","lastWrite","firstNr","parseInt","lastNr","find","selector","$lte","remove","createRxState","collectionName","addCollections","schema","collections","rxState","checkpoint","result","storageInstance","documents","document","proxy","Proxy","target","property","bind","lastChar","charAt","endsWith","key","slice","receiver","Error","state","operations"],"sources":["../../../../src/plugins/state/rx-state.ts"],"sourcesContent":["import {\n    Observable,\n    Subject,\n    distinctUntilChanged,\n    map,\n    merge,\n    shareReplay,\n    startWith,\n    tap\n} from 'rxjs';\nimport { overwritable } from '../../overwritable.ts';\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\nimport type {\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxError,\n    Paths\n} from '../../types';\nimport {\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getProperty,\n    setProperty,\n    PROMISE_RESOLVE_VOID,\n    appendToArray,\n    clone,\n    randomCouchString,\n    deepEqual,\n    getFromMapOrCreate\n} from '../utils/index.ts';\nimport {\n    RX_STATE_COLLECTION_SCHEMA,\n    isValidWeakMapKey,\n    nextRxStateId\n} from './helpers.ts';\nimport {\n    RxStateDocument,\n    RxStateOperation,\n    RxStateModifier\n} from './types.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport { runPluginHooks } from '../../hooks.ts';\n\n\nlet debugId = 0;\n\n\nconst deepFrozenCache = new WeakMap<any, any>();\n\n/**\n * RxDB internally used properties are\n * prefixed with lodash _ to make them less\n * likely to clash with actual state properties\n * from the user.\n */\nexport class RxStateBase<T, Reactivity = unknown> {\n    // used for debugging\n    public _id: number = debugId++;\n    public _state: T | any = {};\n    public $: Observable<T>;\n    public _lastIdQuery: RxQuery<RxStateDocument, RxDocument<RxStateDocument, {}> | null>;\n    public _nonPersisted: {\n        path: string;\n        modifier: RxStateModifier;\n    }[] = [];\n    public _writeQueue = PROMISE_RESOLVE_VOID;\n    public _initDone = false;\n    public _instanceId = randomCouchString(RX_STATE_COLLECTION_SCHEMA.properties.sId.maxLength);\n    public _ownEmits$ = new Subject<T>();\n\n    constructor(\n        public readonly prefix: string,\n        public readonly collection: RxCollection<RxStateDocument>\n    ) {\n        this.collection.onDestroy.push(() => this._writeQueue);\n        this._lastIdQuery = this.collection.findOne({\n            sort: [\n                { id: 'desc' }\n            ]\n        });\n        // make it \"hot\" for better write performance\n        this._lastIdQuery.$.subscribe();\n\n        this.$ = merge(\n            this._ownEmits$,\n            this.collection.$.pipe(\n                tap(event => {\n                    if (\n                        this._initDone &&\n                        event.operation === 'INSERT' &&\n                        event.documentData.sId !== this._instanceId\n                    ) {\n                        mergeOperationsIntoState(this._state, event.documentData.ops);\n                    }\n                })\n            )\n        ).pipe(\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n            map(() => this._state)\n        );\n        // directly subscribe because of the tap() side effect\n        this.$.subscribe();\n    }\n\n    async set(\n        path: Paths<T> | '',\n        modifier: RxStateModifier\n    ) {\n        this._nonPersisted.push({\n            path,\n            modifier\n        });\n        return this._triggerWrite();\n    }\n\n    /**\n     * To have deterministic writes,\n     * and to ensure that multiple js realms do not overwrite\n     * each other, the write happens with incremental ids\n     * that would throw conflict errors and trigger a retry.\n     */\n    _triggerWrite() {\n        this._writeQueue = this._writeQueue.then(async () => {\n            if (this._nonPersisted.length === 0) {\n                return;\n            }\n            let useWrites: typeof this._nonPersisted = [];\n            let done = false;\n            while (!done) {\n                const lastIdDoc = await this._lastIdQuery.exec();\n                appendToArray(useWrites, this._nonPersisted);\n                this._nonPersisted = [];\n                const nextId = nextRxStateId(lastIdDoc ? lastIdDoc.id : undefined);\n                try {\n                    /**\n                     * TODO instead of a deep-clone we should\n                     * only clone the parts where we know that they\n                     * will be changed. This would improve performance.\n                     */\n                    const newState = clone(this._state);\n                    const ops: RxStateOperation[] = [];\n                    for (let index = 0; index < useWrites.length; index++) {\n                        const writeRow = useWrites[index];\n                        const value = getProperty(newState, writeRow.path);\n                        const newValue = writeRow.modifier(value);\n                        /**\n                         * Here we have to clone the value because\n                         * some storages like the memory storage\n                         * make input data deep-frozen in dev-mode.\n                         */\n                        setProperty(newState, writeRow.path, clone(newValue));\n                        ops.push({\n                            k: writeRow.path,\n                            /**\n                             * Here we have to clone the value because\n                             * some storages like the memory storage\n                             * make input data deep-frozen in dev-mode.\n                             */\n                            v: clone(newValue)\n                        });\n                    }\n                    await this.collection.insert({\n                        id: nextId,\n                        sId: this._instanceId,\n                        ops\n                    });\n                    this._state = newState;\n                    this._ownEmits$.next(this._state);\n                    done = true;\n                } catch (err) {\n                    if ((err as RxError).code !== 'CONFLICT') {\n                        throw err;\n                    }\n                }\n            }\n        }).catch(error => {\n            throw newRxError('SNH', {\n                name: 'RxState WRITE QUEUE ERROR',\n                error\n            });\n        });\n        return this._writeQueue;\n    }\n\n    get(path?: Paths<T>) {\n        let ret;\n        if (!path) {\n            ret = this._state;\n        } else {\n            ret = getProperty(this._state, path);\n        }\n\n        /**\n         * In dev-mode we have to clone the value before deep-freezing\n         * it to not have an immutable subobject in the state value.\n         * But calling .get() with the same path multiple times,\n         * should return exactly the same object instance\n         * so it does not cause re-renders on react.\n         * So in dev-mode we have to \n         */\n        if (overwritable.isDevMode() && isValidWeakMapKey(ret)) {\n            const frozen = getFromMapOrCreate(\n                deepFrozenCache,\n                ret,\n                () => overwritable.deepFreezeWhenDevMode(clone(ret))\n            );\n            return frozen;\n        }\n\n        return ret;\n    }\n    get$(path?: Paths<T>): Observable<any> {\n        return this.$.pipe(\n            map(() => this.get(path)),\n            startWith(this.get(path)),\n            distinctUntilChanged(deepEqual),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n        );\n    }\n    get$$(path?: Paths<T>): Reactivity {\n        const obs = this.get$(path);\n        const reactivity = this.collection.database.getReactivityFactory();\n        return reactivity.fromObservable(\n            obs,\n            this.get(path),\n            this.collection.database\n        ) as any;\n    }\n\n    /**\n     * Merges the state operations into a single write row\n     * to store space and make recreating the state from\n     * disc faster.\n     */\n    async _cleanup() {\n        const firstWrite = await this.collection.findOne({\n            sort: [{ id: 'asc' }]\n        }).exec();\n        const lastWrite = await this._lastIdQuery.exec();\n\n        if (!firstWrite || !lastWrite) {\n            return;\n        }\n\n        const firstNr = parseInt(firstWrite.id, 10);\n        const lastNr = parseInt(lastWrite.id, 10);\n        if ((lastNr - 5) < firstNr) {\n            // only run if more then 5 write rows\n            return;\n        }\n\n        // update whole state object\n        await this._writeQueue;\n        await this.set('', () => this._state);\n\n        // delete old ones\n        await this.collection.find({\n            selector: {\n                id: {\n                    $lte: lastWrite.id\n                }\n            }\n        }).remove();\n    }\n}\n\n\nexport async function createRxState<T>(\n    database: RxDatabase,\n    prefix: string\n): Promise<RxStateBase<T>> {\n    const collectionName = 'rx-state-' + prefix;\n    await database.addCollections({\n        [collectionName]: {\n            schema: RX_STATE_COLLECTION_SCHEMA as any\n        }\n    });\n    const collection: RxCollection<RxStateDocument> = database.collections[collectionName];\n\n    const rxState = new RxStateBase<T>(\n        prefix,\n        collection\n    );\n\n\n    /**\n     * Directly get the state and put it into memory.\n     * This ensures we can do non-async accesses to the\n     * correct state.\n     */\n    let done = false;\n    let checkpoint: any = undefined;\n    while (!done) {\n        const result = await getChangedDocumentsSince<RxStateDocument, any>(\n            collection.storageInstance,\n            1000,\n            checkpoint\n        );\n        checkpoint = result.checkpoint;\n        const documents = result.documents;\n        if (documents.length === 0) {\n            done = true;\n        } else {\n            for (let index = 0; index < documents.length; index++) {\n                const document = documents[index];\n                mergeOperationsIntoState(rxState._state, document.ops);\n            }\n        }\n    }\n    rxState._initDone = true;\n\n    const proxy = new Proxy(\n        rxState as any,\n        {\n            get(target, property: any) {\n                if (typeof property !== 'string') {\n                    return target[property];\n                }\n                if ((rxState as any)[property]) {\n                    const ret = (rxState as any)[property];\n                    if (typeof ret === 'function') {\n                        return ret.bind(rxState);\n                    } else {\n                        return ret;\n                    }\n                }\n                const lastChar = property.charAt(property.length - 1);\n                if (property.endsWith('$$')) {\n                    const key = property.slice(0, -2);\n                    return rxState.get$$(key as any);\n                } else if (lastChar === '$') {\n                    const key = property.slice(0, -1);\n                    return rxState.get$(key as any);\n                } else {\n                    return rxState.get(property as any);\n                }\n            },\n            set(target, newValue, receiver) {\n                throw new Error('Do not write to RxState');\n            }\n        }\n    );\n\n    runPluginHooks('createRxState', {\n        collection,\n        state: proxy\n    });\n\n    return proxy;\n}\n\n\nexport function mergeOperationsIntoState<T>(\n    state: T,\n    operations: RxStateOperation[]\n) {\n    for (let index = 0; index < operations.length; index++) {\n        const operation = operations[index];\n        setProperty(state, operation.k, clone(operation.v));\n    }\n}\n"],"mappings":"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","ignoreList":[]}